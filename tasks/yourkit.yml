---
# This playbook contains common plays that will be run on all nodes.

- name: yourkit | Check user exists
  user: name={{yourkit_owner}} state=present

- name: yourkit | Check user home directory
  stat: path={{yourkit_owner_home}}
  register: home_present

- debug: msg=" yourkit | Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true

- name: yourkit | Create temporary directory
  shell: mktemp -d
  register: tempdir
  sudo: true
  tags: yourkit_setup

- name: yourkit | Install tar
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  #when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and 
  when: yourkit_archive_tar_enabled
  with_items:
   - tar  
  tags: yourkit_setup

- name: yourkit | Install zip
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  #when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and 
  when: yourkit_archive_zip_enabled
  with_items:
   - zip    
  tags: yourkit_setup
  
- debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }}"

- name: yourkit | Download yourkit
  command: /usr/sfw/bin/wget -P {{ yourkit_dir_tmp }} {{ yourkit_url }} --no-check-certificate
  register: yourkit_download
  when: (ansible_distribution == 'Solaris')
  tags: yourkit_setup
  
- name: yourkit | Download yourkit
  get_url:
    url="{{ yourkit_url }}"
    dest="{{ yourkit_dir_tmp }}/"
  register: yourkit_download
  when: (ansible_distribution != 'Solaris')  
  tags: yourkit_setup

- name: yourkit | Create base directory
  file:
    dest="{{yourkit_base_dir}}"
    state=directory
    owner="{{yourkit_owner}}"
    group="{{yourkit_group}}"
  sudo : yes
#  when: yourkit_download.changed
  tags: yourkit_setup

- name: yourkit | Extract archive yourkit (tar)
  command: chdir={{ yourkit_base_dir }} /bin/tar xfj {{ yourkit_dir_tmp }}/{{ yourkit_archive }}
#  when: yourkit_download.changed and yourkit_archive_tar_enabled
  when: yourkit_archive_tar_enabled  
  tags: yourkit_setup

- name: yourkit | Extract archive yourkit (zip)
  command: chdir={{ yourkit_base_dir }} /usr/bin/unzip -o -q {{ yourkit_dir_tmp }}/{{ yourkit_archive }}
#  when: yourkit_download.changed and yourkit_archive_zip_enabled  
  when: yourkit_archive_zip_enabled
  tags: yourkit_setup

#  command: tar xzf {{ eclipse_dir_tmp }}/{{eclipse_archive}} -C {{eclipse_base_dir}}/eclipse-{{eclipse_name}} --strip-components=1

- name: yourkit | Configure yourkit startup file
  template: src=startup_with_yjp.sh.j2 dest={{ tomcat_catalina_home_dir }}/bin/startup_with_yjp.sh owner="{{yourkit_owner}}" group="{{yourkit_group}}" mode=0777
  when: tomcat_yourkit_enabled
  tags: yourkit_setup

- name: yourkit | Create base directory
  file:
    dest="{{ yourkit_home_dir }}"
    state=directory
    owner="{{yourkit_owner}}"
    group="{{yourkit_group}}"
  sudo : yes
  tags: yourkit_setup
  
- name: yourkit | Configure yourkit license server
  template: src=license-server.conf.j2 dest={{ yourkit_home_dir }}/{{ yourkit_license_server_file }}
  register: yourkit_configure
  when: yourkit_license_server_enable
  tags: yourkit_setup

- name: yourkit | Configure yourkit ide
  template: src=ide2014.txt.j2 dest={{ yourkit_home_dir }}/ide2014.txt
  register: yourkit_configure
  when: yourkit_ide_enable
  tags: yourkit_setup

#- name: yourkit | Ensure yourkit restarted
#  service: name=yourkit state=restarted
#  when: yourkit_configure.changed

- name: yourkit | Cleanup temporary directory
  file: name={{ tempdir.stdout }} state=absent
  tags: yourkit_setup
  changed_when: false    
  ignore_errors: "{{ ansible_check_mode }}"  

- debug: msg=" yourkit | Yourkit agent {{ yourkit_base_dir }}/{{ yourkit_name }}/bin/{{ yourkit_arch }}/*"
- debug: msg=" yourkit | Start yourkit {{ yourkit_base_dir }}/{{ yourkit_name }}/bin/yjp.sh"

